import{_ as r,r as i,o as c,c as l,a,b as n,d as t,w as p,e as o}from"./app-2d78b25b.js";const u={},d=a("h1",{id:"my-first-bot-for-the-jvm-java-virtual-machine",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#my-first-bot-for-the-jvm-java-virtual-machine","aria-hidden":"true"},"#"),n(" My First Bot for the JVM (Java Virtual Machine)")],-1),h=a("h2",{id:"introduction",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),n(" Introduction")],-1),k={href:"https://docs.oracle.com/javase/tutorial/java/,",title:"The Java Tutorials",target:"_blank",rel:"noopener noreferrer"},b={href:"https://groovy-lang.org/",title:"Groovy programming language",target:"_blank",rel:"noopener noreferrer"},m={href:"https://kotlinlang.org/",title:"Kotlin programming language",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.scala-lang.org/",title:"Scala programming language",target:"_blank",rel:"noopener noreferrer"},g={href:"https://clojure.org/",title:"Clojure programming language",target:"_blank",rel:"noopener noreferrer"},v={href:"https://docs.oracle.com/javase/tutorial/java/,",title:"The Java Tutorials",target:"_blank",rel:"noopener noreferrer"},y=a("h2",{id:"programming",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#programming","aria-hidden":"true"},"#"),n(" Programming")],-1),_=a("h3",{id:"java-jvm-api",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#java-jvm-api","aria-hidden":"true"},"#"),n(" Java (JVM) API")],-1),w=a("h3",{id:"create-a-source-file",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#create-a-source-file","aria-hidden":"true"},"#"),n(" Create a source file")],-1),B=a("code",null,"../bots/MyFirstBot",-1),j=a("code",null,"MyFirstBot.java",-1),I={href:"https://www.jetbrains.com/idea/",title:"IntelliJ IDEA",target:"_blank",rel:"noopener noreferrer"},x={href:"https://www.eclipse.org/downloads/packages/release/2021-12/r/eclipse-ide-java-developers",title:"Eclipse IDE for Java Developers",target:"_blank",rel:"noopener noreferrer"},S={href:"https://netbeans.apache.org/",title:"Apache NetBeans",target:"_blank",rel:"noopener noreferrer"},T={href:"https://code.visualstudio.com/",title:"Visual Studio Code homepage",target:"_blank",rel:"noopener noreferrer"},M=o(`<h3 id="initial-code" tabindex="-1"><a class="header-anchor" href="#initial-code" aria-hidden="true">#</a> Initial code</h3><p>The initial skeleton of your bot could look like this:</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">dev<span class="token punctuation">.</span>robocode<span class="token punctuation">.</span>tankroyale<span class="token punctuation">.</span>botapi<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFirstBot</span> <span class="token keyword">extends</span> <span class="token class-name">Bot</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div>`,3),R=a("code",null,"MyFirstBot",-1),F={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/Bot.html",title:"Bot class",target:"_blank",rel:"noopener noreferrer"},J=a("code",null,"dev.robocode.tankroyale.botapi",-1),A=a("h3",{id:"startup-main-entry",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#startup-main-entry","aria-hidden":"true"},"#"),n(" Startup / Main entry")],-1),E={href:"https://docs.oracle.com/javase/tutorial/getStarted/application/index.html",title:"main() method",target:"_blank",rel:"noopener noreferrer"},W={href:"https://docs.oracle.com/javase/tutorial/getStarted/application/index.html",title:"main() method",target:"_blank",rel:"noopener noreferrer"},N=o(`<div class="language-java" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// The main method starts our bot</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">MyFirstBot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Constructor, which loads the bot config file</span>
    <span class="token class-name">MyFirstBot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">BotInfo</span><span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span><span class="token string">&quot;MyFirstBot.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div>`,1),P={href:"https://docs.oracle.com/javase/tutorial/getStarted/application/index.html",title:"main() method",target:"_blank",rel:"noopener noreferrer"},O={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/BaseBot.html#start()",title:"BaseBot.start()",target:"_blank",rel:"noopener noreferrer"},C=a("p",null,[n("The bot will attempt to "),a("em",null,"join"),n(" the server and wait for a signal to engage in a new battle, where one or multiple instances of this bot must participate.")],-1),V=a("code",null,"MyFirstBot",-1),H={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/BotInfo.html",title:"BotInfo class",target:"_blank",rel:"noopener noreferrer"},q={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/BotInfo.html",title:"BotInfo class",target:"_blank",rel:"noopener noreferrer"},L={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/BotInfo.html#fromFile(java.lang.String)",title:"BotInfo.fromFile() method",target:"_blank",rel:"noopener noreferrer"},z={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/BotInfo.html",title:"BotInfo class",target:"_blank",rel:"noopener noreferrer"},D=a("code",null,"MyFirstBot.json",-1),G=a("p",null,"Note that it is also possible to provide all the necessary configuration fields programmatically without a file.",-1),K=a("h3",{id:"the-run-method",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#the-run-method","aria-hidden":"true"},"#"),n(" The Run method")],-1),Y={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/IBot.html#run()",title:"IBot.run() method",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/IBot.html#run()",title:"IBot.run() method",target:"_blank",rel:"noopener noreferrer"},U=o(`<div class="language-java" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// Called when a new round is started -&gt; initialize and do some movement</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Repeat while the bot is running</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">forward</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">turnGunRight</span><span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">back</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">turnGunRight</span><span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>With the code above, the bot will run in a loop, starting by moving forward 100 units. Then it will turn the gun 360°, move back 100 units and turn the gun 360° again. So the bot will continuously move forward and back all the time and rotate the gun between moving.</p>`,2),X={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/IBot.html#run()",title:"IBot.run() method",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/IBot.html#run()",title:"IBot.run() method",target:"_blank",rel:"noopener noreferrer"},$={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/IBot.html#run()",title:"IBot.run() method",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/IBot.html#isRunning()",title:"IBot.isRunning() method",target:"_blank",rel:"noopener noreferrer"},an=a("code",null,"false",-1),tn={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/IBot.html#isRunning()",title:"IBot.isRunning() method",target:"_blank",rel:"noopener noreferrer"},en={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/IBot.html#isRunning()",title:"IBot.isRunning() method",target:"_blank",rel:"noopener noreferrer"},on=a("code",null,"false",-1),sn=a("h3",{id:"event-handlers",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#event-handlers","aria-hidden":"true"},"#"),n(" Event handlers")],-1),pn={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/Bot.html",title:"Bot API",target:"_blank",rel:"noopener noreferrer"},rn=a("em",null,'"SomeEvent"',-1),cn=a("em",null,"on",-1),ln={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/IBaseBot.html#onScannedBot(dev.robocode.tankroyale.botapi.events.ScannedBotEvent)",title:"IBaseBot.onScannedBot(ScannedBotEvent) event handler",target:"_blank",rel:"noopener noreferrer"},un={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/IBaseBot.html",title:"IBaseBot interface",target:"_blank",rel:"noopener noreferrer"},dn={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/Bot.html",title:"Bot class",target:"_blank",rel:"noopener noreferrer"},hn={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/IBaseBot.html#onScannedBot(dev.robocode.tankroyale.botapi.events.ScannedBotEvent)",title:"IBaseBot.onScannedBot(ScannedBotEvent) event handler",target:"_blank",rel:"noopener noreferrer"},kn=o(`<div class="language-java" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">dev<span class="token punctuation">.</span>robocode<span class="token punctuation">.</span>tankroyale<span class="token punctuation">.</span>botapi<span class="token punctuation">.</span>events<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">// We saw another bot -&gt; fire!</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScannedBot</span><span class="token punctuation">(</span><span class="token class-name">ScannedBotEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div>`,1),bn={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/IBaseBot.html#onHitByBullet(dev.robocode.tankroyale.botapi.events.BulletHitBotEvent)",title:"IBaseBot.onHitByBullet(HitByBulletEvent) event handler",target:"_blank",rel:"noopener noreferrer"},mn=o(`<div class="language-java" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">dev<span class="token punctuation">.</span>robocode<span class="token punctuation">.</span>tankroyale<span class="token punctuation">.</span>botapi<span class="token punctuation">.</span>events<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">// We were hit by a bullet -&gt; turn perpendicular to the bullet</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onHitByBullet</span><span class="token punctuation">(</span><span class="token class-name">HitByBulletEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Calculate the bearing to the direction of the bullet</span>
        <span class="token keyword">double</span> bearing <span class="token operator">=</span> <span class="token function">calcBearing</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getBullet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Turn 90 degrees to the bullet direction based on the bearing</span>
        <span class="token function">turnLeft</span><span class="token punctuation">(</span><span class="token number">90</span> <span class="token operator">-</span> bearing<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div>`,1),fn={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/Bot.html",title:"Bot API",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://robocode-dev.github.io/tank-royale/api/java/dev/robocode/tankroyale/botapi/IBaseBot.html#calcBearing(double)",title:"IBaseBot.calcBearing(double) method",target:"_blank",rel:"noopener noreferrer"},vn=o(`<h3 id="putting-it-all-together" tabindex="-1"><a class="header-anchor" href="#putting-it-all-together" aria-hidden="true">#</a> Putting it all together</h3><p>Okay, let us put all the parts together in a single source file:</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">dev<span class="token punctuation">.</span>robocode<span class="token punctuation">.</span>tankroyale<span class="token punctuation">.</span>botapi<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">dev<span class="token punctuation">.</span>robocode<span class="token punctuation">.</span>tankroyale<span class="token punctuation">.</span>botapi<span class="token punctuation">.</span>events<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFirstBot</span> <span class="token keyword">extends</span> <span class="token class-name">Bot</span> <span class="token punctuation">{</span>

    <span class="token comment">// The main method starts our bot</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">MyFirstBot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Constructor, which loads the bot config file</span>
    <span class="token class-name">MyFirstBot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token class-name">BotInfo</span><span class="token punctuation">.</span><span class="token function">fromFile</span><span class="token punctuation">(</span><span class="token string">&quot;MyFirstBot.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Called when a new round is started -&gt; initialize and do some movement</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Repeat while the bot is running</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">forward</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">turnGunRight</span><span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">back</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">turnGunRight</span><span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// We saw another bot -&gt; fire!</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onScannedBot</span><span class="token punctuation">(</span><span class="token class-name">ScannedBotEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// We were hit by a bullet -&gt; turn perpendicular to the bullet</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onHitByBullet</span><span class="token punctuation">(</span><span class="token class-name">HitByBulletEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Calculate the bearing to the direction of the bullet</span>
        <span class="token keyword">double</span> bearing <span class="token operator">=</span> <span class="token function">calcBearing</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getBullet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Turn 90 degrees to the bullet direction based on the bearing</span>
        <span class="token function">turnLeft</span><span class="token punctuation">(</span><span class="token number">90</span> <span class="token operator">-</span> bearing<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="running-the-bot" tabindex="-1"><a class="header-anchor" href="#running-the-bot" aria-hidden="true">#</a> Running the bot</h2><p>Now we got a JSON configuration file and the program for our bot. The next step is to provide the files for running the bot application. We need to set up scripts for starting the bot, and also supply the bot API library (jar file) that the bot on build on and hence depends on.</p><h3 id="supply-bot-api-library" tabindex="-1"><a class="header-anchor" href="#supply-bot-api-library" aria-hidden="true">#</a> Supply bot API library</h3><p>You need to download the <code>robocode-tankroyale-bot-api-x.y.z.jar</code> library, e.g. from the Java sample bots or Maven repository and put this into a folder accessible for your bot. I recommend that you put this into a <code>../bots/lib</code> folder (you create) in the root directory containing your MyFirstBot directory (<code>../bots/MyFirstBot</code>).</p><p>In the following, we assume that you created this <code>lib</code> directory beside your bot directory, and copied the bot API jar file into the <code>lib</code> folder.</p><h3 id="scripts-for-starting-the-bot" tabindex="-1"><a class="header-anchor" href="#scripts-for-starting-the-bot" aria-hidden="true">#</a> Scripts for starting the bot</h3>`,9),yn={href:"https://fileinfo.com/extension/cmd",title:"Windows Command File",target:"_blank",rel:"noopener noreferrer"},_n={href:"https://fileinfo.com/extension/sh",title:"Bash Shell Script",target:"_blank",rel:"noopener noreferrer"},wn=a("p",null,[n("We create a command file for Windows named "),a("code",null,"MyFirstBot.cmd"),n(" and put it into our bot directory:")],-1),Bn=a("div",{class:"language-text","data-ext":"text"},[a("pre",{class:"language-text"},[a("code",null,`java -cp ../lib/* MyFirstBot.java >nul
`)])],-1),jn=a("code",null,"java ... MyFirstBot.java",-1),In=a("code",null,"-cp ../lib/*",-1),xn={href:"https://howtodoinjava.com/java/basics/java-classpath/",title:"Java classpath",target:"_blank",rel:"noopener noreferrer"},Sn=a("code",null,"../lib",-1),Tn=o(`<p>The star (*) tell the classloader in Java to read any file in the <code>lib</code> folder, and is just a convenient way to avoid specifying the full name of the filename of the bot API <code>robocode-tankroyale-bot-api-x.y.z.jar</code>, which is quite long.</p><p><em><strong>IMPORTANT NOTE:</strong></em> The <code>&gt;nul</code> is a work-around necessary to avoid a Windows-specific quirk where the bot becomes unresponsive when started up as a process with the Robocode. <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><p>Next, we provide a shell script for macOS and Linux named <code>MyFirstBot.sh</code> and put it into our bot directory:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>#!/bin/sh
java -cp ../lib/* MyFirstBot.java
</code></pre></div><p>Note that we need to set the file permission to grant <em>read</em>, <em>write</em>, and especially the <em>execute</em> right of the script for the owner and owner´s group, e.g. set the permissions to <code>775</code> (<code>-rwxrwxr-x</code>). We can do this with this command:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>chown 775 MyFirstBot.sh
</code></pre></div><p>Note that the <code>5</code> (<em>read</em> and <em>execute</em>) is set as everybody else than the owner and owner´s group does should not have the <em>write</em> permission per default unless it is explicitly granted by you. 😉</p><p>Now you have everything in place to run your bot with Robocode Tank Royale.</p><h2 id="packaging-your-bot" tabindex="-1"><a class="header-anchor" href="#packaging-your-bot" aria-hidden="true">#</a> Packaging your bot</h2><p>If you need to package your bot for distribution, you can do this by zip-packing the bot directory. The zip archive should contain:</p><ul><li>Source file (.java, .kt, .groovy, .clj, or .scala)</li><li>Script files (.cmd and .sh)</li><li>JSON config file (.json)</li></ul>`,11),Mn={href:"https://fileinfo.com/extension/readme",title:"Readme File",target:"_blank",rel:"noopener noreferrer"},Rn=o('<hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>? &quot;Note that the unresponsiveness of a Windows process running a bot is not observed when running the bot directly from the command line with or without the script; only when using a Java process for running the script inside the Robocode booter.&quot; <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>',2);function Fn(Jn,An){const s=i("RouterLink"),e=i("ExternalLinkIcon");return c(),l("div",null,[d,h,a("p",null,[n("This tutorial is meant for the Java/JVM platform and a continuation of "),t(s,{to:"/tutorial/my-first-bot.html"},{default:p(()=>[n("My First Bot")]),_:1}),n(" tutorial.")]),a("p",null,[n("The programming language used in this tutorial is "),a("a",k,[n("Java"),t(e)]),n(", which is the most widespread programming language for the JVM. But other JVM programming languages like "),a("a",b,[n("Groovy"),t(e)]),n(", "),a("a",m,[n("Kotlin"),t(e)]),n(", "),a("a",f,[n("Scala"),t(e)]),n(", and "),a("a",g,[n("Clojure"),t(e)]),n(" can be used as well.")]),a("p",null,[n("This tutorial assumes you are already familiar with basic "),a("a",v,[n("Java"),t(e)]),n(" programming. But this tutorial should suit well for practising your skills programming for Java by making a bot for Robocode.")]),y,_,a("p",null,[n("The documentation of the Java (JVM) API for Robocode Tank Royale is available on "),t(s,{to:"/api/apis.html"},{default:p(()=>[n("this page")]),_:1}),n(".")]),w,a("p",null,[n("Inside your bot directory ("),B,n(") you need to create a Java source file named "),j,n(". You can edit that file using a text editor of your choice, or an [IDE] like e.g. "),a("a",I,[n("IntelliJ IDEA"),t(e)]),n(", "),a("a",x,[n("Eclipse"),t(e)]),n(", "),a("a",S,[n("NetBeans"),t(e)]),n(", or "),a("a",T,[n("Visual Studio Code"),t(e)]),n(".")]),M,a("p",null,[n("The class in this example ("),R,n(") is inherited from the "),a("a",F,[n("Bot"),t(e)]),n(" class from the "),J,n(" package provides methods for controlling the bot but also makes it possible to receive events from the game. The API is taking care of the communication with the server behind the scene.")]),A,a("p",null,[n("The next thing we need to do is to declare a "),a("a",E,[n("main"),t(e)]),n(" method for our bot. The bot will run like an ordinary application, and hence the "),a("a",W,[n("main"),t(e)]),n(" method is the entry point of the bot.")]),N,a("p",null,[n("The "),a("a",P,[n("main"),t(e)]),n(" method in this example simply calls the "),a("a",O,[n("start"),t(e)]),n(" method of the bot, which will let the bot startup reading configuration and start communicating with the server.")]),C,a("p",null,[n("The constructor of "),V,n(" is set up to call the base constructor, which needs a "),a("a",H,[n("BotInfo"),t(e)]),n(" object containing the bot configuration. The "),a("a",q,[n("BotInfo"),t(e)]),n(" class contains a convenient method named "),a("a",L,[n("fromFile"),t(e)]),n(" which can initialize the "),a("a",z,[n("BotInfo"),t(e)]),n(" by reading a JSON file. In this case, it will read the "),D,n(" file we created earlier, which must be available within the bot directory (or some other file location accessible for the bot).")]),G,K,a("p",null,[n("When the bot is started by the game, the "),a("a",Y,[n("run"),t(e)]),n(" method will be called. Hence, your bot should override this method to provide the logic for the bot when the game is started. The "),a("a",Q,[n("run"),t(e)]),n(" method should do all required initializing. After that, it should enter a loop that runs until the game is ended.")]),U,a("p",null,[n("When leaving the "),a("a",X,[n("run"),t(e)]),n(" method, the bot will not be able to send new commands each round besides code that runs in event handlers. Therefore, a loop is used for preventing the "),a("a",Z,[n("run"),t(e)]),n(" method from exiting. However, we should stop the loop as soon as the bot is no longer running, and hence need to exit the "),a("a",$,[n("run"),t(e)]),n(" method when the "),a("a",nn,[n("isRunning"),t(e)]),n(" method returns "),an,n(".")]),a("p",null,[n("The "),a("a",tn,[n("isRunning"),t(e)]),n(" method returns a flag maintained by the API. When the bot is told to stop/terminate its execution, the "),a("a",en,[n("isRunning"),t(e)]),n(" method will automatically be set to return "),on,n(" by the API.")]),sn,a("p",null,[n("The "),a("a",pn,[n("Bot API"),t(e)]),n(" provides a lot of event handlers (on"),rn,n(" methods) that are triggered by different types of events. All event handlers in the Bot API start with the "),cn,n("-prefix like e.g. "),a("a",ln,[n("onScannedBot"),t(e)]),n(". All event handlers are available with the "),a("a",un,[n("IBaseBot"),t(e)]),n(" interface, which the "),a("a",dn,[n("Bot"),t(e)]),n(" class implements.")]),a("p",null,[n("Talking about the common "),a("a",hn,[n("onScannedBot"),t(e)]),n(" event handler, we can implement this handler to fire the cannon whenever our bot scans an opponent bot:")]),kn,a("p",null,[n("We can also implement another event handler "),a("a",bn,[n("onHitByBullet"),t(e)]),n(" to let the bot attempt to avoid new bullet hits by turning the bot perpendicular to the bullet direction:")]),mn,a("p",null,[n("Note that the "),a("a",fn,[n("Bot API"),t(e)]),n(" provides helper methods like "),a("a",gn,[n("calcBearing"),t(e)]),n(" to ease calculating angles and bearings in the game.")]),vn,a("p",null,[n("The remaining part is to supply some script files for starting up the bot. This will ease starting up the bot from the command line. But those files are also necessary for booting up the bot from Robocode, which will look out for script files when examining the bot directory and figure out how to run the bot. The script files tell the "),t(s,{to:"/articles/booter.html",title:"Robocode booter"},{default:p(()=>[n("booter")]),_:1}),n(" of Robocode how to start the bot, which is different for each programming language, platform and OS.")]),a("p",null,[n("With Java it is possible to run your bot under Windows, macOS, and Linux. Hence, it is a good idea to provide script files for all these OSes, which mean that we should provide a "),a("a",yn,[n("command file"),t(e)]),n(" for Windows, and a "),a("a",_n,[n("shell script"),t(e)]),n(" for macOS and Linux.")]),wn,Bn,a("p",null,[n("So the "),jn,n(" part is used for starting the bot standing in the bot directory from a command prompt. The "),In,n(" part is used for setting the "),a("a",xn,[n("classpath"),t(e)]),n(" containing the bot API. We put this in the library beside the bot directory, and hence the classpath is "),Sn,n(".")]),Tn,a("p",null,[n("And then you might want to provide a "),a("a",Mn,[n("README"),t(e)]),n(" file to provide some information for other people about your bot. 😃")]),Rn])}const Wn=r(u,[["render",Fn],["__file","my-first-bot-for-jvm.html.vue"]]);export{Wn as default};
