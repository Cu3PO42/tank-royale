import{_ as r,r as n,o as s,c as i,a as t,b as e,d as o,e as d}from"./app-2d78b25b.js";const h={},l=t("h1",{id:"debugging",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#debugging","aria-hidden":"true"},"#"),e(" Debugging")],-1),c={href:"https://en.wikipedia.org/wiki/Debugging",title:"Print debugging",target:"_blank",rel:"noopener noreferrer"},p=t("h2",{id:"run-your-bot-from-the-command-line",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#run-your-bot-from-the-command-line","aria-hidden":"true"},"#"),e(" Run your bot from the command line")],-1),u={href:"https://www.geeksforgeeks.org/system-out-println-in-java/",title:"Print debugging in Java",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.slf4j.org/",title:"Simple Logging Facade for Java (SLF4J)",target:"_blank",rel:"noopener noreferrer"},b={href:"https://logging.apache.org/log4j/2.x/",title:"Apache Log4j 2",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.microsoft.com/en-us/dotnet/api/system.console.writeline?view=net-6.0",title:"Print debugging in .Net",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.microsoft.com/en-us/dotnet/core/extensions/logging?tabs=command-line",target:"_blank",rel:"noopener noreferrer"},y=d(`<p>To see how a bot is started up you can have a look at the sample bots and examine the script files. How your robot is started depends on the programming language and platform you are using. But here follows some examples of what to write in the command line or script file.</p><h4 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> Java:</h4><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-cp</span> <span class="token punctuation">..</span>/lib/* MyFirstBot.java
</code></pre></div><p>Here <code>../lib/*</code> assumes the <code>robocode-tankroyale-bot-api-x.y.z.jar</code> is located in the <code>lib</code> directory.</p><h4 id="net" tabindex="-1"><a class="header-anchor" href="#net" aria-hidden="true">#</a> .Net</h4><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>dotnet run
</code></pre></div><p>This assumes you have your project file in the directory where you run the <code>dotnet</code> command.</p><h2 id="supply-a-server-secret" tabindex="-1"><a class="header-anchor" href="#supply-a-server-secret" aria-hidden="true">#</a> Supply a server secret</h2><p>The first time the server is running a battle, it creates a random secret (key) that all bots must supply to join the battle. The GUI handles this automatically in the background when starting up bots from the GUI via the booter.</p><p>The secret protects your server against external bots trying to join without (your) permission. They will need the secret from your server to join it.</p><p>So to run your bot from the command line, you&#39;ll need to provide the secret for the server. The easiest way to do this is to set/export the <code>SERVER_SECRET</code> environment variable which the Bot API will read and send to the server ( via the bot handshake).</p><p>You&#39;ll find the generated secret for your server with the <code>server.properties</code> file in the same directory as the GUI application is run from. Copy and paste the value after the equal-sign (=) from the <code>bots-secrets</code> field and use it for defining the value of your <code>SERVER_SECRET</code> variable, e.g.:</p><h4 id="bash" tabindex="-1"><a class="header-anchor" href="#bash" aria-hidden="true">#</a> Bash:</h4><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">SERVER_SECRET</span><span class="token operator">=</span>s0m3R0bOc0dEs3crEt
</code></pre></div><h4 id="windows-command-prompt" tabindex="-1"><a class="header-anchor" href="#windows-command-prompt" aria-hidden="true">#</a> Windows command prompt:</h4><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> <span class="token assign-left variable">SERVER_SECRET</span><span class="token operator">=</span>s0m3R0bOc0dEs3crEt
</code></pre></div><p>You can put this into a script used for running your bot.</p><h2 id="how-to-join-a-new-battle" tabindex="-1"><a class="header-anchor" href="#how-to-join-a-new-battle" aria-hidden="true">#</a> How to join a new battle</h2><h4 id="step-1-start-server-or-new-battle" tabindex="-1"><a class="header-anchor" href="#step-1-start-server-or-new-battle" aria-hidden="true">#</a> Step 1: Start server or new battle</h4><p>First, you need to start a server as your bot needs to join a server. You can do this from the GUI menu by starting a server or a battle. When starting a new battle from the GUI, a server will automatically be started as well.</p><h4 id="step-2-start-your-bot-from-the-command-line" tabindex="-1"><a class="header-anchor" href="#step-2-start-your-bot-from-the-command-line" aria-hidden="true">#</a> Step 2: Start your bot from the command line</h4><p>Now you need to start your bot from the command line as described earlier.</p><h4 id="step-3-wait-for-your-bot-to-show-up-in-joined-bots" tabindex="-1"><a class="header-anchor" href="#step-3-wait-for-your-bot-to-show-up-in-joined-bots" aria-hidden="true">#</a> Step 3: Wait for your bot to show up in &#39;Joined Bots&#39;</h4><p>On the dialog for selecting bots for the battle, you should see your bot show up under the &#39;Joined Bots&#39; list. Add it to the battle and add some other opponent bot(s) as well to start the battle.</p><h4 id="step-4-observe-output-in-the-command-line" tabindex="-1"><a class="header-anchor" href="#step-4-observe-output-in-the-command-line" aria-hidden="true">#</a> Step 4: Observe output in the command line</h4><p>Your print or logging information should be written out to the command line. If not, make sure to put the logging information in the constructor or main method to make sure something is written out.</p>`,26);function v(w,_){const a=n("ExternalLinkIcon");return s(),i("div",null,[l,t("p",null,[e("Here follows some information about "),t("a",c,[e("print debugging"),o(a)]),e(" your bot using print statements or a logging framework.")]),p,t("p",null,[e("One easy way to debug your bot is to run it from the command line and put some print statements into your code to write out debugging information into the command line via stdin and/or stderr. With Java/JVM, you will typically use "),t("a",u,[e("System.out.println()"),o(a)]),e(", "),t("a",m,[e("SLF4J"),o(a)]),e(" or "),t("a",b,[e("Log4j"),o(a)]),e(", and for .Net you'll typically use "),t("a",g,[e("Console.WriteLine()"),o(a)]),e(" or use "),t("a",f,[e("Logging"),o(a)]),e(".")]),y])}const x=r(h,[["render",v],["__file","debug.html.vue"]]);export{x as default};
